// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using digify.Shared;

#nullable disable

namespace digify.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220420100111_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClassbookDayEntryUser", b =>
                {
                    b.Property<Guid>("MissedDaysId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MissingId")
                        .HasColumnType("uuid");

                    b.HasKey("MissedDaysId", "MissingId");

                    b.HasIndex("MissingId");

                    b.ToTable("ClassbookDayEntryUser");
                });

            modelBuilder.Entity("ClassUser", b =>
                {
                    b.Property<Guid>("ClassesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("ClassUser");
                });

            modelBuilder.Entity("digify.Models.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("digify.Models.Classbook", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ArchivedName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Classbooks");
                });

            modelBuilder.Entity("digify.Models.ClassbookDayEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ParentClassbookId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentClassbookId");

                    b.ToTable("ClassbookDayEntries");
                });

            modelBuilder.Entity("digify.Models.ClassbookDayEntryLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("ApprovedByTeacher")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ParentDayEntryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentDayEntryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassbookDayEntryLessons");
                });

            modelBuilder.Entity("digify.Models.Timetable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("digify.Models.TimeTableElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TimeTableElements");
                });

            modelBuilder.Entity("digify.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid?>("SchoolClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SchoolClassId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClassbookDayEntryUser", b =>
                {
                    b.HasOne("digify.Models.ClassbookDayEntry", null)
                        .WithMany()
                        .HasForeignKey("MissedDaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("digify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("MissingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassUser", b =>
                {
                    b.HasOne("digify.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("digify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("digify.Models.Classbook", b =>
                {
                    b.HasOne("digify.Models.Class", "ReferedClass")
                        .WithOne("Classbook")
                        .HasForeignKey("digify.Models.Classbook", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReferedClass");
                });

            modelBuilder.Entity("digify.Models.ClassbookDayEntry", b =>
                {
                    b.HasOne("digify.Models.Classbook", "ParentClassbook")
                        .WithMany("DayEntries")
                        .HasForeignKey("ParentClassbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentClassbook");
                });

            modelBuilder.Entity("digify.Models.ClassbookDayEntryLesson", b =>
                {
                    b.HasOne("digify.Models.ClassbookDayEntry", "ParentDayEntry")
                        .WithMany("Lessons")
                        .HasForeignKey("ParentDayEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("digify.Models.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("ParentDayEntry");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("digify.Models.Timetable", b =>
                {
                    b.HasOne("digify.Models.User", "OwningUser")
                        .WithOne("Timetable")
                        .HasForeignKey("digify.Models.Timetable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwningUser");
                });

            modelBuilder.Entity("digify.Models.TimeTableElement", b =>
                {
                    b.HasOne("digify.Models.Timetable", "Parent")
                        .WithMany("TableElements")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("digify.Models.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("digify.Models.User", b =>
                {
                    b.HasOne("digify.Models.Class", "SchoolClass")
                        .WithMany("Students")
                        .HasForeignKey("SchoolClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SchoolClass");
                });

            modelBuilder.Entity("digify.Models.Class", b =>
                {
                    b.Navigation("Classbook")
                        .IsRequired();

                    b.Navigation("Students");
                });

            modelBuilder.Entity("digify.Models.Classbook", b =>
                {
                    b.Navigation("DayEntries");
                });

            modelBuilder.Entity("digify.Models.ClassbookDayEntry", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("digify.Models.Timetable", b =>
                {
                    b.Navigation("TableElements");
                });

            modelBuilder.Entity("digify.Models.User", b =>
                {
                    b.Navigation("Timetable");
                });
#pragma warning restore 612, 618
        }
    }
}
